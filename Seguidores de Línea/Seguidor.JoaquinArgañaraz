from spike import PrimeHub, LightMatrix, Button, StatusLight, ForceSensor, MotionSensor, Speaker, ColorSensor, App, DistanceSensor, Motor, MotorPair
from spike.control import wait_for_seconds, wait_until, Timer
import hub as advancedHub
import time
import math
from math import *

hub = PrimeHub()

global color_1
global color_2
global color_3

# MOTOR
motor_pair = MotorPair('C', 'A')
motor_pair.set_motor_rotation(3 * math.pi, "cm")

# PID
error = 0
error_previo = 0
integral = 0
derivada = 0
proporcional = 0
kp = 2.45
ki = 0.02
kd = 0.6
salida = 0

# DISPLAY
H = 9
L = 7
_ = 0

nada = [
    [_,_,_,_,_],
    [_,_,_,_,_],
    [_,_,_,_,_],
    [_,_,_,_,_],
    [_,_,_,_,_],
]

flecha_frente = [
    [_,_,H,_,_],
    [_,_,_,H,_],
    [H,H,H,H,H],
    [_,_,_,H,_],
    [_,_,H,_,_],
]

flecha_atras = [
    [_,_,H,_,_],
    [_,H,_,_,_],
    [H,H,H,H,H],
    [_,H,_,_,_],
    [_,_,H,_,_],
]

flecha_der = [
    [_,_,H,_,_],
    [_,_,H,_,_],
    [H,_,H,_,H],
    [_,H,H,H,_],
    [_,_,H,_,_],
]

flecha_izq = [
    [_,_,H,_,_],
    [_,H,H,H,_],
    [H,_,H,_,H],
    [_,_,H,_,_],
    [_,_,H,_,_],
]

cruz_h = [
    [_,_,H,_,_],
    [_,_,H,_,_],
    [H,H,H,H,H],
    [_,_,H,_,_],
    [_,_,H,_,_],
]

cruz_l = [
    [_,_,L,_,_],
    [_,_,L,_,_],
    [L,L,L,L,L],
    [_,_,L,_,_],
    [_,_,L,_,_],
]

verde = [
    [H,H,_,_,_],
    [_,_,H,H,_],
    [_,_,_,_,H],
    [_,_,H,H,_],
    [H,H,_,_,_],
]

verde_l = [
    [L,L,_,_,_],
    [_,_,L,L,_],
    [_,_,_,_,L],
    [_,_,L,L,_],
    [L,L,_,_,_],
]

buscar = [
    [H,H,H,_,_],
    [H,_,_,H,_],
    [H,H,H,_,_],
    [H,_,_,H,_],
    [H,H,H,_,_],
]


def matrix_to_image(matrix):
    return advancedHub.Image(":".join(["".join([str(n) for n in r]) for r in matrix]))

sen_1 = ColorSensor("B")
sen_2 = ColorSensor("D")
sen_3 = ColorSensor("F")

def PID():
    color_1 = sen_1.get_reflected_light()
    color_2 = sen_2.get_reflected_light()
    color_3 = sen_3.get_reflected_light()

    error = color_1 - color_3
    abs_error = abs(error)
    proporcional = error
    integral = integral + error * 0.04
    derivada = (error - error_previo) / 0.04
    error_previo = error
    return int(kp * proporcional + ki * integral + kd * derivada)

def giro_90_der():
    motor_pair.start_tank(0,0)
    wait_for_seconds(1)
    hub.motion_sensor.reset_yaw_angle()
    while (hub.motion_sensor.get_yaw_angle() < 88):
        motor_pair.start_tank(40,-40)
    motor_pair.start_tank(0,0)
    wait_for_seconds(1)
    angle = hub.motion_sensor.get_yaw_angle()
    print('Angulo:', angle)

def giro_90_izq():
    motor_pair.start_tank(0,0)
    wait_for_seconds(1)
    hub.motion_sensor.reset_yaw_angle()
    while (hub.motion_sensor.get_yaw_angle() > -88):
        motor_pair.start_tank(-40,40)
    motor_pair.start_tank(0,0)
    wait_for_seconds(1)
    angle = hub.motion_sensor.get_yaw_angle()
    print('Angulo:', angle)

def giro_180_der():
    giro_90_der()
    giro_90_der()

def giro_180_izq():
    giro_90_izq()
    giro_90_izq()

def verifica_doble_negro():
    motor_pair.start_tank(0,0)
    wait_for_seconds(1)
    display = matrix_to_image(cruz_l)
    advancedHub.display.show(display)
    wait_for_seconds(2)
    motor_pair.move_tank(0.8,'cm',20,20)
    if luz_1 < 20 and luz_3 < 20:
        display = matrix_to_image(cruz_h)
        advancedHub.display.show(display)
        wait_for_seconds(2)
        display = matrix_to_image(nada)
        advancedHub.display.show(display)
        motor_pair.move_tank(2,'cm',20,20)
    else:
        motor_pair.move_tank(1.2,'cm',-20,-20)
        display = matrix_to_image(nada)
        advancedHub.display.show(display)

def verifica_verde():
    motor_pair.start_tank(0,0)
    display = matrix_to_image(verde_l)
    advancedHub.display.show(display)
    wait_for_seconds(2)
    motor_pair.move_tank(0.4,'cm',-20,-20)
    color_1 = sen_1.get_color()
    color_2 = sen_2.get_color()
    color_3 = sen_3.get_color()
    if color_1 == 'green' and color_3 == 'green':
        display = matrix_to_image(verde)
        advancedHub.display.show(display)
        wait_for_seconds(2)
        display = matrix_to_image(nada)
        advancedHub.display.show(display)
        display = matrix_to_image(flecha_atras)
        advancedHub.display.show(display)
        giro_180_der()
    elif color_1 == 'green' and not color_3 == 'green':
        motor_pair.move_tank(1.5,'cm',100,-10)
        color_1 = sen_1.get_color()
        color_2 = sen_2.get_color()
        color_3 = sen_3.get_color()
        if color_1 == 'green' and color_3 == 'green':
            display = matrix_to_image(verde)
            advancedHub.display.show(display)
            wait_for_seconds(2)
            display = matrix_to_image(nada)
            advancedHub.display.show(display)
            display = matrix_to_image(flecha_atras)
            advancedHub.display.show(display)
            giro_180_der()
        elif color_1 == 'green' and not color_3 == 'green':
            motor_pair.move_tank(0.5,'cm',-100,0)
            motor_pair.move_tank(6,'cm',30,30)
            display = matrix_to_image(verde)
            advancedHub.display.show(display)
            wait_for_seconds(2)
            display = matrix_to_image(nada)
            advancedHub.display.show(display)
            display = matrix_to_image(flecha_der)
            advancedHub.display.show(display)
            giro_90_der()
            motor_pair.move_tank(3,'cm',30,30)
        else:
            display = matrix_to_image(nada)
            advancedHub.display.show(display)
            motor_pair.move_tank(2,'cm',-20,-20)
    elif color_3 == 'green' and not color_1 == 'green':
        motor_pair.move_tank(1.5,'cm',-10,100)
        color_1 = sen_1.get_color()
        color_2 = sen_2.get_color()
        color_3 = sen_3.get_color()
        if color_3 == 'green' and color_1 == 'green':
            display = matrix_to_image(verde)
            advancedHub.display.show(display)
            wait_for_seconds(2)
            display = matrix_to_image(nada)
            advancedHub.display.show(display)
            display = matrix_to_image(flecha_atras)
            advancedHub.display.show(display)
            giro_180_der()
        elif color_3 == 'green' and not color_1 == 'green':
            motor_pair.move_tank(0.5,'cm',0,-100)
            motor_pair.move_tank(6,'cm',30,30)
            display = matrix_to_image(verde)
            advancedHub.display.show(display)
            wait_for_seconds(2)
            display = matrix_to_image(nada)
            advancedHub.display.show(display)
            display = matrix_to_image(flecha_izq)
            advancedHub.display.show(display)
            giro_90_izq()
            motor_pair.move_tank(3,'cm',30,30)
        else:
            display = matrix_to_image(nada)
            advancedHub.display.show(display)
            motor_pair.move_tank(2,'cm',-20,-20)
    else:
        display = matrix_to_image(nada)
        advancedHub.display.show(display)
        motor_pair.move_tank(2,'cm',-20,-20)
    display = matrix_to_image(nada)
    advancedHub.display.show(display)

def buscar_linea(direccion):
    motor_pair.start_tank(0,0)
    display = matrix_to_image(nada)
    advancedHub.display.show(display)
    display = matrix_to_image(buscar)
    advancedHub.display.show(display)
    if direccion == 'der':
        while luz_3 > 45:
            motor_pair.start_tank(50,0)
        motor_pair.move_tank(1,'cm',0,20)
    elif direccion == 'izq':
        while luz_1 > 45:
            motor_pair.start_tank(0,50)
        motor_pair.move_tank(1,'cm',20,0)
    else:
        display = matrix_to_image(nada)
        advancedHub.display.show(display)
    display = matrix_to_image(nada)
    advancedHub.display.show(display)

while True:
    luz_1 = sen_1.get_reflected_light()
    luz_2 = sen_2.get_reflected_light()
    luz_3 = sen_3.get_reflected_light()

    color_1 = sen_1.get_color()
    color_2 = sen_2.get_color()
    color_3 = sen_3.get_color()


    error = luz_1 - luz_3
    proporcional = error
    integral = integral + error * 0.04
    derivada = (error - error_previo) / 0.04
    salida = int(kp * proporcional + ki * integral + kd * derivada)
    error_previo = error
    motor_pair.start_tank(40 + salida, 40 - salida)

'''
    if color_1 == 'green' or color_3 == 'green':
        verifica_verde()
    elif luz_1 < 45 and luz_3 < 45:
        verifica_doble_negro()
    else:
        motor_pair.start_tank(60 - salida, 60 + salida)
'''
    

'''
while True:
    color_1 = sen_1.get_reflected_light()
    color_2 = sen_2.get_reflected_light()
    color_3 = sen_3.get_reflected_light()

    error = color_1 - color_3
    proporcional = error
    integral = integral + error * 0.04
    derivada = (error - error_previo) / 0.04
    salida = int(kp * proporcional + ki * integral + kd * derivada)
    error_previo = error

    if color_1 < 45 and color_3 < 45:
        verifica_doble_negro()
    else:
        motor_pair.start_tank(60 - salida, 60 + salida)

'''

'''
while True:

    color_1 = sen_1.get_reflected_light()
    color_2 = sen_2.get_reflected_light()
    color_3 = sen_3.get_reflected_light()

    error = color_1 - color_3
    abs_error = abs(error)
    proporcional = error
    integral = integral + error * 0.04
    derivada = (error - error_previo) / 0.04
    salida = int(kp * proporcional + ki * integral + kd * derivada)
    error_previo = error

    if color_1 < 40 and color_2 < 50 and color_3 < 40:
        motor_pair.move_tank(4,'cm',80,80)
        hub.light_matrix.show_image('HAPPY')
    elif color_1 < 40 and color_2 < 60:
        motor_pair.move_tank(2,'cm',40,80)
    elif color_3 < 40 and color_2 < 60:
        motor_pair.move_tank(2,'cm',80,40)
    else:
        motor_pair.start_tank(60 - salida, 60 + salida)
#     t_final = int(time.time() * 1000)
#     print("tiempo : ",t_final - t_inicial, "ms")
'''
